Beginner Concepts Questions 
1.	What class of object is mtcars? What function did you use to find out?
It is a data frame. 

> class(mtcars)
[1] "data.frame"
 
2.	Is precip defined as a 1-dimensional array or a vector? How did you find out?
It is defined as a vector. 
 
 > is(precip,"vector")
[1] TRUE
 
3.	How would you convert the data.frame trees into a matrix?
 > NewMatrix<-as.matrix(trees)
 
4.	What is the name of the 14th city in the precip dataset?
> precip[14]
Atlanta 
   48.3 

5.	What function would you use if you wanted to combine all three data sets into a single object?
> MyList<-list(precip,trees,mtcars)

6.	Does precip consist of numeric data? How did you find out?
Yes

 > is(precip,"numeric")
[1] TRUE

7.	Code four different ways to subscript the 2nd row and 7th column of mtcars using bracket notation - i.e., 17.02
> mtcars[2,7]
[1] 17.02
 
 > mtcars["Mazda RX4 Wag","qsec"]
[1] 17.02

> mtcars["Mazda RX4 Wag",][7]
               qsec
Mazda RX4 Wag 17.02

> mtcars[,"qsec"][2]
[1] 17.02

8.	How would you change the precipitation values of "Juneau", "Phoenix", and "Sacramento" to 23, 46, and 12 in the precip dataset. (Hint: You will need to use subscripts and the <- operator).
> precip[c("Juneau","Phoenix","Sacramento")]<-c(23,46,12)

9.	Are there any trees in the trees dataset with more girth than volume? How did you find out?
> any(trees[,"Girth"]>trees[,"Volume"])
[1] FALSE

10.	Take the sum of all elements in column height of the trees dataset, call this value A. Take the sum of all elements in row Valiant of the mtcars dataset, call this value B. Take the sum of the first 8 elements of the precip dataset, call this value C. Divide C by B and add A. What is your final answer? 
> A<-sum(trees[,"Height"])
> B<-sum(mtcars["Valiant",])
> C<-sum(precip[1:8])
> (C/B)+A
[1] 2356.633

Intermediate Concepts Questions
11.	What does the REPLACE= argument of the sample( ) function do?
If it is TRUE, the returned sampled values are put back to the pool of potential values for the next draw. If FALSE, the sampled values are not returned to be put back to the pool of potential values for the next draw. 

12.	Usingas(MyMatrix,"numeric") will not convert MyMatrix to numeric data! Can you think of a property of logicals that you can use to convert the logicals to 0's and 1's other than the as( ) function?
> MyMatrix*1

13.	If you wanted to check if all of the elements in each row are true, how would you do this?
> apply(MyMatrix,1,all)
[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

14.	How many times does the number 7 occur in MyMatrix?
> length(which(MyMatrix==7))
[1] 16

15.	How do you find the sum of each column?
> apply(MyMatrix,1,sum)

16.	How do you find the product of each column?
> apply(MyMatrix,2,prod)

17.	How would you change every instance of the number 10 to 12?
> MyMatrix[which(MyMatrix==10)]<-12

18.	How many values in MyMatrix are greater than 3 and less than 8?
> length(which(MyMatrix>3 & Mymatrix<8))

19.	How do you change the elements of column 12 into character data, while keeping columns 1- 11 as numeric data??
> MyFrame<-data.frame(MyMatrix)
> MyFrame[,12]<-as(MyFrame[,12],"character")

20.	Find which rows of MyMatrix have a sum >70. Make a new version of MyMatrix where the 13th column is a set of TRUE and FALSE values denoting which rows have a sum >70. (Hint: What type of object allows you to store both logical and numeric data at once?)
> Sums<-apply(MyMatrix,1,sum)
> Sums>70
[1] FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
> NewMatrix<-matrix(NA,nrow=8,ncol=13)
> NewFrame<-data.frame(NewMatrix)
> NewFrame[,1:12]<-MyMatrix
> NewFrame[,13]<-Sums>70

Advanced Concepts Questions 
1) Write a function that returns the phrase "Hello, World."
> greetWorld<-function(Message){print(Message)} 
> greetWorld("Hello, World.")
[1] "Hello, World."

2) Load the iris dataset we used in the earlier tests. Write a function that takes iris as its argument, and returns three subsets of the data.frame split by the three different types of species (saved as a single object).
IrisFunction<-function(iris){Setosa<-iris[which(iris[,"Species"]=="setosa"),]Virginica<-iris[which(iris[,"Species"]=="virginica"),]Versicolor<-iris[which(iris[,"Species"]=="versicolor"),]return(list(Setosa,Virginica,Versicolor)}

3) Write a function that takes iris as its argument. The function should, for each row, add Sepal.Length and Petal.Length if Sepal.Width is > 3.1. It should substract Petal.Length from Sepal.Length if Sepal.Width is <3.1. The answer should be returned as a vector.
> IrisFunction<-function(iris){AnswerVector<-array(NA,dim=dim(iris)[[1]])AnswerVector<-(index in 1:dim(iris)[[1]]){AnswerVector<-(iris[index,"Sepal.Width"]>3.1){AnswerVector[index]<-iris[index,"Petal.Length"]+iris[index,"Sepal.Length"]else if (iris[index,"Sepal.Width"]<3.1){ AnswerVector[index]<-iris[index,"Sepal.Length"]-iris[index,"Petal.Length"]}}return(AnswerVector)}

4) Load the mtcars dataset we used in the earlier tests. Write a function that takes a number of cylinders as its argument. Have the function return the average miles per gallon (column mpg) for all cars with that many cylinder (column cyl).
> findMPG<-function(NumCylinders) {CylinderSubset<-mtcars[which(mtcars[,"cyl"]==NumCylinders),]Answer<-mean(CylinderSubset[,"mpg"])return(Answer)}

5)	Write a function that simulates 1,000,000 powerball drawings. A powerball drawing takes a random sample of 5 numbers (without replacement) from 1 through 69, plus one powerball number ranging from 1 through 26. The function should return a single object recording all of your draws.
>PowerballDraw<-function(NumDrawings) {DrawsMatrix<-matrix(NA,nrow=NumDrawings,ncol=6)(draw in 1:NumDrawings) {DrawsMatrix[draw,1:5]<-sample(c(1:69),5,replace=FALSE)DrawsMatrix[draw,6]<-sample(c(1:26),1,replace=FALSE)} return(DrawsMatrix)}
> PowerballDraw(1000000)

6) Write a function that take a single set of lottery numbers (as a vector) as its argument. As before, write a function that simulates 1,000,000 powerball drawings. Have the function return a TRUE or FALSE value if you won any of the drawings.
>PowerballDraw<-function(MyNumbers) {DrawsMatrix<-matrix(NA,nrow=1000000,ncol=6)(draw in 1:1000000) {DrawsMatrix[draw,1:5]<-sample(c(1:69),5,replace=FALSE)DrawsMatrix[draw,6]<-sample(c(1:26),1,replace=FALSE)} TestForMatch<-array(NA,dim=1000000)(test in 1:1000000) {TestForMatch[test]<-all(DrawsMatrix[test,]==MyNumbers)}Result<-any(TestForMatch)return(Result)}

Advanced Test 
1) What is the mean, median, and standard deviation of precip?
> mean(precip)
[1] 34.91571
> median(precip)
[1] 36.6
> sd(precip)
[1] 13.33442

2) Is precip best visualized using a barplot( ) or hist( )? Why?
hist( ) because precip is continuous data. 

3) Generate a vector of random numbers drawn from a normal distribution with the same mean, standard deviation, and number of elements as in the precip dataset. Name this vector RandomNormal.
>RandomNormal<-rnorm(length(precip),mean(precip),sd(precip))

4) Write a function that tests, based on the means of each distribution, whether it is likely that RandomNormal and precip were drawn from the same underlying distribution.
>comparePrecip<-function(precip,RandomNormal,Iterations=100) {comparePrecip<-function(precip,RandomNormal,Iterations=100) { Barrel<-c(precip,RandomNormal) ReplicatedMeans<-array(data=NA,dim=Iterations)(Counter in 1:Iterations) {NewPrecip<-sample(Barrel,length(precip),replace=TRUE) NewRandomNormal<-sample(Barrel,length(RandomNormal),replace=TRUE)PrecipMean<-mean(NewPrecip)RandomMean<-mean(NewRandomNormal)[Counter]<-RandomMean-PrecipMean} Percentage<-length(which(ReplicationResults>MeanDifference))/Iterationsreturn(Percentage)}

5) Create a density( ) plot of precip and RandomNormal. Is the test you performed above (question 4) a good or bad indicator of whether the two distributions are identical? Why or why not?
I am unsure if it is "good" or "bad" for it seems to fall in between. Both have similar peaks with respect to means, medians and modes. But the precip has a second smaller peak valued at about 15, while the RandomNormal only has 1 peak.

